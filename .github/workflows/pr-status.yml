name: PR Status Label and Assignees

on:
  pull_request:
    types: [review_requested]
  pull_request_review:
    types: [submitted]

jobs:
  label-and-assign:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write

    steps:
      - name: Add label based on the the status
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            const author = pr.user;
            const LABELS = {
              READY: 'needs-review',
              APPROVED: 'approved',
              CHANGES_REQUESTED: 'changes-requested',
            }

            let label;
            let assignee;

            if (context.eventName === 'pull_request' && context.payload.action === 'review_requested') {
              const reviewer = context.payload.requested_reviewer;

              label = LABELS.READY;
              assignee = reviewer.login;

            } else if (context.eventName === 'pull_request_review' && context.payload.action === 'submitted') {
              const review = context.payload.review;
              if (!review) return;

              if (review.state === 'approved') {
                label = LABELS.APPROVED;
                assignee = author.login;
              } else if (review.state === 'changes_requested') {
                label = LABELS.CHANGES_REQUESTED;
                assignee = author.login;
              } else {
                return; // Unhandled state
              }
            } else {
              return; // Unsupported event
            }

            if (label) {
              // Remove existing labels
              await github.rest.issues.removeAllLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
              });
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: [label],
              });
            }

            if (assignee) {
              let existingAssignees = context.payload.pull_request.assignees.map(a => a.login).filter(a => a);
              if (!existingAssignees.includes(assignee)) {
                if (existingAssignees.length > 0) {
                  await github.rest.issues.removeAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    assignees: existingAssignees
                  });
                }
                await github.rest.issues.addAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  assignees: [assignee],
                });
              }
            }
