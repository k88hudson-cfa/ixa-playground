name: PR Status Label and Assignees

on:
  pull_request:
    types: [review_requested]
  pull_request_review:
    types: [submitted]

jobs:
  label-and-assign:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write

    steps:
      - name: Add label based on the the status
        uses: actions/github-script@v7
        with:
          script: |
            const LABELS = {
              READY: "needs-review",
              APPROVED: "approved",
              CHANGES_REQUESTED: "changes-requested",
            };

            const is_review_requested =
              context.eventName === "pull_request" &&
              context.payload.action === "review_requested";
            const is_review_submitted =
              context.eventName === "pull_request_review" &&
              context.payload.action === "submitted";

            if (!is_review_requested && !is_review_submitted) {
              console.log("No matching event found");
              return;
            }

            const pull_request = context.payload.pull_request;
            const issue_number = pull_request.number;
            const existing_labels = pull_request.labels
              .map((l) => l.name)
              .filter((l) => Object.values(LABELS).includes(l));
            const existing_assignees = pull_request.assignees
              .map((a) => a.login)
              .filter((a) => a);
            const author = pull_request.user?.login;

            console.log(
              `Author: ${author}, Existing Labels: ${existing_labels}, Existing Assignees: ${existing_assignees}`
            );

            let label;
            let assignee;

            if (is_review_requested) {
              const reviewer = context.payload.requested_reviewer?.login;
              label = LABELS.READY;
              assignee = reviewer;
            } else if (is_review_submitted) {
              const review = context.payload.review;
              if (review.state === "approved") {
                label = LABELS.APPROVED;
                assignee = author;
              } else if (review.state === "changes_requested") {
                label = LABELS.CHANGES_REQUESTED;
                assignee = author;
              }
            }

            if (label && !existing_labels.includes(label)) {
              // Remove existing labels
              if (existing_labels.length > 0) {
                await github.rest.issues.removeAllLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number,
                });
              }
              // Add the new label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number,
                labels: [label],
              });
            }

            if (assignee && !existing_assignees.includes(assignee)) {
              if (existing_assignees.length > 0) {
                await github.rest.issues.removeAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number,
                  assignees: existing_assignees,
                });
              }
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number,
                assignees: [assignee],
              });
            }
